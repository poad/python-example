name: Build and Test
 
on:
  push:
    branches:    
    - main 
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  configure:
    runs-on: ubuntu-latest
    steps:
    - name: Pull request auto merge enabler
      if: github.event_name == 'pull_request'
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.0
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        targets:
          - path: pip-module-example/lib-module
            test: false
            lint: true
    steps:
      - uses: actions/checkout@v2
      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - id: install-pipenv
        name: Install pipenv
        run: |
          CUR=$(pwd)
          cd ${{ matrix.targets.path }}
          pip install --upgrade --no-cache-dir pip
          pip install --no-cache-dir pipenv
          cd ${CUR}
        shell: bash

      - id: cache-pipenv
        name: Cache pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - id: sync-pipfile
        name: Sync pipfile
        run:  |
          CUR=$(pwd)
          cd ${{ matrix.targets.path }}
          pipenv sync --dev
          cd ${CUR}
        shell: bash
        
      - name: Build and lint
        run: |
          CUR=$(pwd)
          cd ${{ matrix.targets.path }}
          pipenv run lint
          pipenv run format
          pip install .
          if [ "${{ matrix.targets.path }}" == "true" ]; then
            pipenv run test
          fi
          cd ${CUR}
        shell: bash
